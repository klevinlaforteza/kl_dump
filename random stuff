##---------- Query channel box attributes
mc.channelBox("mainChannelBox", query=True, selectedMainAttributes=True)
##----------

##---------- Connect attributes query text
import maya.cmds as mc

DRIVER = []

def setDriver():
	selection = mc.ls(selection=True)
	mc.textField("driver_text", edit=True, text=", ".join(selection))
	DRIVER = (mc.textField("driver_text", query=True, text=True)).split(", ")
	for d in DRIVER:
		print d
	print DRIVER
##----------

def renameNodes():
	
	# Create a dictionary for the nodes
	dict = {
		"tweak"			: "twk",
		"skinCluster"		: "scn",
		"blendShape"		: "bsn",
		"polySmoothFace"	: "smn",
		"transferAttributes"	: "tfa"
		}
	# Query the selection
	selection = mc.ls(selection=True)
	
	# Get the shape node of each object
	for object in selection:
		shape = mc.listRelatives(object, type="shape")[0]
		
		# Get the nodes connected to the shape
		nodes = mc.listConnections(shape, destination=False)
		for node in nodes:
			nodeType = mc.objectType(node)
			if nodeType in dict:
				mc.rename(node, "%s_%s" % (object, dict[nodeType]))
				
def deleteBindPose():

	# Create a list of bind pose nodes in the scene
	bindPose = mc.ls("bindPose*", type="dagPose")
	for pose in bindPose:
		try:
			mc.delete(pose)
			print "%s has been deleted." % pose
		except:
			print "Unable to delete %s." % pose
			
			
def deleteUnknownNodes():
	
	# Create a list of unknown nodes in the scene
	unknownNodes = mc.ls(type="unknown")
	num = 0
	for node in unknownNodes:
		try:
			mc.delete(node)
			print "%s has been deleted." % node
			num += 1
		except:
			pass
	mc.warning("Deleted %s unknown nodes." % num)


def copySkinCluster():

	# Query selection and assign variables
	selection = mc.ls(selection=True)
	source = selection[0]
	selection.remove(source)
	shape = mc.listRelatives(source, shapes=True, fullPath=True)[0]
	
	# Get the skin cluster node
	try:
		scn = mc.listConnections(shape, type="skinCluster")[0]
	except:
		scnSet = mc.listConnections(shape, type="objectSet")[2]
		scn = mc.listConnections(scnSet, type="skinCluster")[0]
		
	# Get the list of the joints in the skin cluster node
	joints = mc.skinCluster(scn, query=True, influence=True)
	
	# Attach object to their own skin cluster and copy the weights from the source
	for object in selection:
		scn1 = mc.skinCluster(joints, object, toSelectedBones=True)[0]
		mc.copySkinWeights(sourceSkin=scn, destinationSkin=scn1, noMirror=True, surfaceAssociation="closestPoint", normalize=True, influenceAssociation=["label", "oneToOne", "label"])
		
	mc.select(source, selection)
