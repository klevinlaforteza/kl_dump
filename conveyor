import maya.cmds as mc

'''
Conveyor belt rig using follicles
'''

'''------------------------------------------------------------------------------------------
import maya.cmds as mc

sel = mc.ls(sl=1)
ctrl = "WRK2_ConveyorTrack_B_ctrl" + ".Cycle"
for x in sel:
    shape = mc.listRelatives(x, s=1)[0]
    attr = shape + ".parameterU"
    start = mc.getAttr(attr)
    
    mc.setAttr(attr, 0)
    mc.setDrivenKeyframe(attr, cd=ctrl, itt="linear", ott="linear")
    mc.setAttr(ctrl, 1)
    mc.setAttr(attr, 1)
    mc.setDrivenKeyframe(attr, cd=ctrl, itt="linear", ott="linear")
    mc.setAttr(ctrl, 0)
    
    mc.setAttr(shape + "_parameterU.preInfinity", 3)
    mc.setAttr(shape + "_parameterU.postInfinity", 3)
    mc.keyframe(shape + "_parameterU", index=(0, 0), e=1, fc=0 - start, o="over", a=1)
    mc.keyframe(shape + "_parameterU", index=(1, 1), e=1, fc=1 - start, o="over", a=1)

def create_follicle(mesh, uPos=0, vPos=0):
    
    print 'Creating follicle'
    
    # figure out what has been passed in so we can make the right connections
    if cmds.objectType(mesh) == 'transform':
        shape = cmds.listRelatives(mesh, s=True)[0]
        objType = cmds.objectType(shape)
    else:
        objType = cmds.objectType(mesh)
    
    follicle = cmds.createNode('follicle')
    follicleTransform = cmds.listRelatives(follicle, p=True)[0]
    
    # depending on the object passed in we want to connect the follicle slightly differntly 
    if objType == 'nurbsSurface':
        cmds.connectAttr('%s.local' % mesh, '%s.inputSurface' % follicle)
    else:
        cmds.connectAttr('%s.outMesh' % mesh, '%s.inputMesh' % follicle)
    
    cmds.connectAttr('%s.worldMatrix[0]' % mesh, '%s.inputWorldMatrix' % follicleTransform)
    cmds.connectAttr('%s.outRotate' % follicle, '%s.rotate' % follicleTransform)
    cmds.connectAttr('%s.outTranslate' % follicle, '%s.translate' % follicleTransform)
    
    cmds.setAttr('%s.parameterU' % follicle, uPos)
    cmds.setAttr('%s.parameterV' % follicle, vPos)
    
    return follicleTransform	

------------------------------------------------------------------------------------------'''

	
def create_follicle(object, uPos=0.0, vPos=0.0):
	
	shape = mc.listRelatives(object, shapes=True)[0]
	objType = mc.objectType(shape)
	
	follicle = mc.createNode("follicle")
	follicleTransform = mc.listRelatives(follicle, parent=True)[0]
	
	if objType == "nurbsSurface":
		mc.connectAttr("%s.local" % object, "%s.inputSurface" % follicle)
	elif objType == "mesh":
		mc.connectAttr("%s.outMesh" % object, "%s.inputMesh" % follicle)
		
	mc.connectAttr('%s.worldMatrix[0]' % object, '%s.inputWorldMatrix' % follicleTransform)
	mc.connectAttr('%s.outRotate' % follicle, '%s.rotate' % follicleTransform)
	mc.connectAttr('%s.outTranslate' % follicle, '%s.translate' % follicleTransform)
	mc.setAttr('%s.parameterU' % follicle, uPos)
	mc.setAttr('%s.parameterV' % follicle, vPos)
	
	return follicle, follicleTransform

	
def conveyor_rig():
	selection = mc.ls(selection=True)[0]
	follicleGrp = mc.createNode("transform", n="%s_fol_grp" % selection)
	spans = mc.getAttr(mc.listRelatives(selection, shapes=True)[0] + ".spansU")
	distance = 1.00/spans
	start = distance/2
	num = 1
	
	for span in range(0, spans):
		foll = create_follicle(selection, start, 0.5)
		start += distance
		
		follicleTransform = mc.rename(foll[1], "%s_%s_fol" % (selection, num))
		num += 1
		
		mc.parent(follicleTransform, follicleGrp)
		mc.select(follicleTransform)
		joint = mc.joint(name=follicleTransform.replace("fol", "skn"))
		
